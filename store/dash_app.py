import dash
from dash import dcc, html  # ‚úÖ ‡πÅ‡∏Å‡πâ Import ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
import plotly.express as px
import pandas as pd
from django_plotly_dash import DjangoDash
from django.db.models import Count, Sum
from store.models import Product, Order, StorePayment

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dash App
app = DjangoDash('SalesDashboard')

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Lazy Load (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô import)
def get_dashboard_data():
    category_data = list(Product.objects.values("category").annotate(total=Count("id")))
    sales_data = list(Order.objects.values("created_at").annotate(total_sales=Sum("total_amount")))
    payment_data = list(StorePayment.objects.values("payment_method").annotate(total=Count("id")))

    df_category = pd.DataFrame(category_data)
    df_sales = pd.DataFrame(sales_data)
    df_payment = pd.DataFrame(payment_data)

    return df_category, df_sales, df_payment

# ‚úÖ Callback ‡πÉ‡∏ô Dash ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô
def update_dashboard():
    df_category, df_sales, df_payment = get_dashboard_data()

    # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if df_sales.empty:
        df_sales = pd.DataFrame({"created_at": [], "total_sales": []})

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    fig_category = px.pie(df_category, names="category", values="total", title="Product Categories")
    fig_sales = px.line(df_sales, x="created_at", y="total_sales", title="Sales Over Time") if not df_sales.empty else None
    fig_payment = px.pie(df_payment, names="payment_method", values="total", title="Payment Methods")

    return fig_category, fig_sales, fig_payment

# ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Layout ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
app.layout = html.Div([
    html.H1("üìä Sales Dashboard"),
    
    html.Div([
        dcc.Graph(id="category_graph"),
        dcc.Graph(id="sales_graph"),
        dcc.Graph(id="payment_graph"),
    ]),

    # ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà)
    html.Button("Reload Data", id="reload_button", n_clicks=0),
])

# ‚úÖ Callback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
from dash.dependencies import Input, Output

@app.callback(
    [Output("category_graph", "figure"),
     Output("sales_graph", "figure"),
     Output("payment_graph", "figure")],
    Input("reload_button", "n_clicks")
)
def update_graph(n_clicks):
    return update_dashboard()
