import pandas as pd
import dash
from dash import dcc, html, Input, Output
from django_plotly_dash import DjangoDash
from store.models import Order, OrderItem, Product
import plotly.express as px
from datetime import datetime, timedelta
from sklearn.linear_model import LinearRegression
import numpy as np

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dash App
app = DjangoDash('SalesDashboard')

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Django
def get_data():
    order_items = OrderItem.objects.select_related("order", "product").values(
        "order__created_at", "price", "quantity", "product__name", "product__category"
    )
    df = pd.DataFrame.from_records(order_items)

    if not df.empty:
        df["order__created_at"] = pd.to_datetime(df["order__created_at"]).dt.date  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        df["total_price"] = df["price"] * df["quantity"]  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

    return df

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = get_data()

# ‚úÖ Layout ‡∏Ç‡∏≠‡∏á Dash
app.layout = html.Div([
    html.H1("üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢", style={'textAlign': 'center'}),

    dcc.Dropdown(
        id="period-filter",
        options=[
            {"label": "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ", "value": "week"},
            {"label": "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "value": "month"},
            {"label": "‡∏õ‡∏µ‡∏ô‡∏µ‡πâ", "value": "year"},
            {"label": "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "value": "all"},
        ],
        value="week",
        placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"
    ),

    dcc.Graph(id="sales-line-chart"),  # ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢

    # ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô
    html.Div([
        html.Div(dcc.Graph(id="sales-bar-chart"), style={'width': '50%', 'padding': '10px'}),
        html.Div(dcc.Graph(id="sales-pie-chart"), style={'width': '50%', 'padding': '10px'}),
    ], style={'display': 'flex'}),

    dcc.Graph(id="category-bar-chart"),  # ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    dcc.Graph(id="sales-prediction-chart")  # ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
])

@app.callback(
    [Output("sales-line-chart", "figure"), 
     Output("sales-bar-chart", "figure"), 
     Output("sales-pie-chart", "figure"), 
     Output("category-bar-chart", "figure"),  # ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
     Output("sales-prediction-chart", "figure")],
    Input("period-filter", "value")
)
def update_charts(period):
    df = get_data()
    current_date = datetime.now().date()

    if period == "week":
        start_date = current_date - timedelta(weeks=1)
    elif period == "month":
        start_date = current_date.replace(day=1)
    elif period == "year":
        start_date = current_date.replace(month=1, day=1)
    else:
        start_date = df["order__created_at"].min()

    filtered_df = df[df["order__created_at"] >= start_date]

    # ‚úÖ **‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô**
    if not filtered_df.empty:
        sales_summary = filtered_df.groupby("order__created_at")["total_price"].sum().reset_index()
        line_fig = px.line(sales_summary, x="order__created_at", y="total_price",
                           title="üìà ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô",
                           labels={"order__created_at": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "total_price": "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)"})
    else:
        line_fig = px.line(title="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")

    # ‚úÖ **‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå**
    if not filtered_df.empty:
        product_summary = filtered_df.groupby("product__name")["quantity"].sum().reset_index()
        bar_fig = px.bar(product_summary, x="product__name", y="quantity",
                         title="üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
                         labels={"product__name": "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "quantity": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢"})
    else:
        bar_fig = px.bar(title="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    # ‚úÖ **‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**
    if not filtered_df.empty:
        pie_fig = px.pie(product_summary, names="product__name", values="quantity",
                         title="ü•ß ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
                         labels={"product__name": "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "quantity": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢"})
    else:
        pie_fig = px.pie(title="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    # ‚úÖ **‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**
    if not filtered_df.empty():
        category_summary = filtered_df.groupby("product__category")["total_price"].sum().reset_index()
        category_fig = px.bar(category_summary, x="product__category", y="total_price",
                              title="üì¶ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
                              labels={"product__category": "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "total_price": "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)"},
                              color="total_price", color_continuous_scale="greens")
    else:
        category_fig = px.bar(title="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    # ‚úÖ **‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ 30 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤**
    if not filtered_df.empty():
        sales_summary["order__created_at"] = pd.to_datetime(sales_summary["order__created_at"])
        sales_summary["days_since_start"] = (sales_summary["order__created_at"] - sales_summary["order__created_at"].min()).dt.days

        # Train Model
        X = sales_summary["days_since_start"].values.reshape(-1, 1)
        y = sales_summary["total_price"].values
        model = LinearRegression().fit(X, y)

        # Predict Future Sales for the Next 30 Days
        future_days = np.arange(X[-1][0] + 1, X[-1][0] + 31).reshape(-1, 1)
        future_dates = [sales_summary["order__created_at"].max() + timedelta(days=i) for i in range(1, 31)]
        future_sales = model.predict(future_days)

        # Plot Predictions
        prediction_df = pd.DataFrame({"order__created_at": future_dates, "predicted_sales": future_sales})
        prediction_fig = px.line(prediction_df, x="order__created_at", y="predicted_sales",
                                 title="üîÆ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ 30 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤",
                                 labels={"order__created_at": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "predicted_sales": "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡∏ö‡∏≤‡∏ó)"},
                                 line_shape="spline")
        prediction_fig.add_scatter(x=sales_summary["order__created_at"], y=sales_summary["total_price"], mode="markers+lines",
                                   name="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á")
    else:
        prediction_fig = px.line(title="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

    return line_fig, bar_fig, pie_fig, category_fig, prediction_fig
